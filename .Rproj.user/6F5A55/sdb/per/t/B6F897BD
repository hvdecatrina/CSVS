{
    "collab_server" : "",
    "contents" : "library(shiny)\nshinyServer(function(input, output, session){\n  values <- reactiveValues()\n  updateSelectInput(session, \"dateSet\", choices = dateList)\n  \n  dataOfTime <- reactive({\n    data <- NULL\n    if(!is.null(input$dateSet)){\n      data <- newAllData[newAllData$SAMPLETIME == input$dateSet,]\n    }\n    return(data)\n  })\n  \n  pListData <- reactive({\n    dataOfAll <- dataOfTime()\n    pAreaList <- NULL\n    if(!is.null(dataOfAll)){\n      pArea <-dataOfAll[!duplicated(dataOfAll$SAMPLEPROVINCE),c(3,24)]\n      pAreaList <- pArea$pCode\n      names(pAreaList) <- pArea$SAMPLEPROVINCE\n      pAreaList <- c(\"全国\" = -1, pAreaList)\n    }\n    return(pAreaList)\n  })\n  \n  observe({\n    choices <- pListData()\n    updateSelectInput(session, \"pArea\", choices = choices)\n  })\n\n  qListData <- reactive({\n    data <- dataOfTime()\n    qList <- NULL\n    if(!is.null(input$pArea)) {\n      if(input$pArea != \"-1\"){\n        qData <- data[grep(paste(\"^\",input$pArea,sep=\"\"),data$qCode),c(5,25)]\n        qCODE <- qData$qCode\n        qList <- qData[!duplicated(qCODE),]$qCode\n        names(qList) <- qData[!duplicated(qCODE),]$SAMPLEPREFECTURE\n        qList <- c(\"全省\" = -1, qList)\n      }else{\n        qList <- c(\"\")\n      }\n    }\n    return(qList)\n  })\n\n  cListData <- reactive({\n    data <- dataOfTime()\n    cList <- NULL\n    if(!is.null(input$pArea)){\n      if(input$pArea != \"-1\"){\n        if(!is.null(input$qArea)){\n          if(input$qArea != \"-1\"){\n            cData <- data[grep(paste(\"^\",input$qArea,sep=\"\"),data$cCode),c(6,26)]\n            cCODE <- cData$cCode\n            cList <- cData[!duplicated(cCODE),]$cCode\n            names(cList) <- cData[!duplicated(cCODE),]$SAMPLECOUNTY\n            cList <- c(\"全市\" = -1, cList)\n          }else{\n            cList <- c(\"\")\n          }\n        }\n      }else{\n        cList <- c(\"\")\n      }\n    }\n    return(cList)\n  })\n\n  observe({\n    choices <- qListData()\n    updateSelectInput(session, \"qArea\", choices = choices)\n  })\n\n  observe({\n    choices <- cListData()\n    updateSelectInput(session, \"cArea\", choices = choices)\n  })\n  \n  siteList <- reactive({\n    if(!is.null(dataOfTime())){\n      dataone <- dataOfTime()\n      dataList <- dataone[!duplicated(dataone$keyId),]\n      if(!is.null(input$pArea)){\n        if(input$pArea == \"-1\"){\n          return(dataList)\n        }else{\n          pcode <- input$pArea\n          if(!is.null(input$qArea)){\n            if(input$qArea == \"-1\"){\n              data <- subset(dataList,pCode == pcode)\n              return(data)\n            }else{\n              qcode <- input$qArea\n              if(!is.null(input$cArea)){\n                if(input$cArea == \"-1\"){\n                  data <- subset(dataList,qCode == qcode)\n                  return(data)\n                }else{\n                  ccode <- input$cArea\n                  data <- subset(dataList,cCode == ccode)\n                  return(data)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  selectedSites <- reactive({\n    selSites <- input$selectedSites\n    return(selSites)\n  })\n  observe({\n    if(!is.null(siteList())) {\n      keys <- siteList()$key\n    } else {\n      keys <- list()\n    }\n    session$sendCustomMessage(type = \"updateVisibleMonitors\", keys)\n  })\n  keyAllJsonF <- reactive({\n    if(!is.null(input$dateSet)){\n      timeData <- subset(sampleData,SAMPLETIME == input$dateSet)\n      timeData <- droplevels(timeData)\n      if(!is.null(input$clickey)){\n        keyData <- subset(timeData,key == input$clickey)\n        keyData <- droplevels(keyData)\n      }else{\n        keyData <- data.frame()\n      }\n      return(keyData)\n    }\n  })\n  observe({\n    keyAllJson <- keyAllJsonF()\n    if(!is.null(keyAllJson)){\n      sampleJsonGroup <- split(keyAllJson,keyAllJson$sampleOnlyId)\n      sampleJsonData <- sapply(sampleJsonGroup,function(r){\n        oo <- as.data.frame(r,stringsAsFactors = FALSE)\n        ll <- lapply(oo,as.character)\n        kk <- sapply(seq(length(ll)),function(r){\n          nameR <- names(ll[r])\n          boolStr <- nameR == \"DETECTIONITEM\" | nameR == \"BELONGTO\" | nameR == \"TOXICITY\" | nameR == \"DETECTIONRESULTS\" | nameR == \"BELONGTO\" | nameR == \"JUDGMENT_CN\" | nameR == \"JUDGMENT_EUR\" | nameR == \"JUDGMENT_JPN\" | nameR == \"JUDGMENT_USA\" | nameR == \"JUDGMENT_HK\" | nameR == \"JUDGMENT_CAC\"\n          if(boolStr){\n            rArray <- jsonArray(ll[[r]],quote = TRUE)\n          }else{\n            rArray <- jsonArray(ll[[r]][1],quote = TRUE)\n          }\n          names(rArray) <- nameR\n          return(rArray)\n        })\n        return(jsonObject(kk))\n      })\n      dataJson <- jsonArray(sampleJsonData)\n      session$sendCustomMessage(type = \"updateDataJson\", dataJson)\n    }\n  })\n  observe({\n    selData <- selectedSites()\n    if(!is.null(selData)){\n      pos <- as.character(unique(sampleData[sampleData$key == selData,1])) \n      session$sendCustomMessage(type = \"updatapos\", pos)\n    }\n  })\n  observe({\n    keyAllJson <- keyAllJsonF()\n    if(!is.null(keyAllJson)){\n      if(is.null(input$clickey) && !is.null(input$categorySelect)){\n        protype <- 1\n      }else if(!is.null(input$clickey) && !is.null(input$categorySelect)){\n        categoryData <- subset(keyAllJson,CATEGORY == input$categorySelect)\n        categoryData <- droplevels(categoryData)\n        if(nrow(categoryData) == 0){\n          protype <- 0\n        }else{\n          category <- unique(categoryData$SAMPLECATEGORY)\n          cc <- sapply(seq(length(category)),function(r){\n            qq <- subset(categoryData,SAMPLECATEGORY == category[r])\n            num <- length(unique(qq$sampleOnlyId))\n            value <- jsonObject(list(value = num,name = as.character(category[r])))\n            return(value)\n          })\n          protype <- jsonArray(cc)\n        }\n      }else{\n        protype <- 2\n      }\n      session$sendCustomMessage(type = \"updateCategory\", protype)\n    }\n  })\n})\n",
    "created" : 1493704771852.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "247221884",
    "id" : "B6F897BD",
    "lastKnownWriteTime" : 1495167376,
    "last_content_update" : 1495167376904,
    "path" : "~/CSVS/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}